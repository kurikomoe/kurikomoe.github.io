{"title":"Anonymous;Code 汉化总结","subtitle":"致匿名者汉化组","excerpt":"<h2 id=\"introduction\" tabindex=\"-1\">Introduction</h2>\n<blockquote>\n<p>我庄严的宣布，我要不干好事。</p>\n</blockquote>\n<p>说实话，在参与 Anonymous;Code (以下简称 AC) 汉化之前，其实完全不知道 AC 是什么（捂脸）。当时只知道是：</p>\n<div class=\"quote\">\n<p><strong>天国の「SFアドベンチャーの最高到達点——电子数字娱乐的颠峰之作」</strong></p>\n</div>\n<p>说实话，对于只玩过 <code>SteinsGate</code>无印和 Zero（<spoiler>甚至 Zero 还没打通，最后看动漫看完的</spoiler>）的咱来说。对志仓的了解也就仅限于这些。可能再加上一点点 ChaosHead 叭。。没错，咱甚至没有玩过 ChaosChild，u1s1 真的是纯路人。</p>\n<p>但是不得不说，SteinsGate 系列真的令栗子印象深刻，可能也正是基于这种好感，栗子才义无反顾的投入了这个深坑。</p>\n","render_content":"<h2 id=\"introduction\" tabindex=\"-1\">Introduction</h2>\n<blockquote>\n<p>我庄严的宣布，我要不干好事。</p>\n</blockquote>\n<p>说实话，在参与 Anonymous;Code (以下简称 AC) 汉化之前，其实完全不知道 AC 是什么（捂脸）。当时只知道是：</p>\n<div class=\"quote\">\n<p><strong>天国の「SFアドベンチャーの最高到達点——电子数字娱乐的颠峰之作」</strong></p>\n</div>\n<p>说实话，对于只玩过 <code>SteinsGate</code>无印和 Zero（<spoiler>甚至 Zero 还没打通，最后看动漫看完的</spoiler>）的咱来说。对志仓的了解也就仅限于这些。可能再加上一点点 ChaosHead 叭。。没错，咱甚至没有玩过 ChaosChild，u1s1 真的是纯路人。</p>\n<p>但是不得不说，SteinsGate 系列真的令栗子印象深刻，可能也正是基于这种好感，栗子才义无反顾的投入了这个深坑。</p>\n <!-- more --> \n<h2 id=\"background\" tabindex=\"-1\">Background</h2>\n<p>Anonymous;Code 用的是 Mages 的自研 Galgame 游戏引擎。在前辈们（CoZ 等）的努力下，大部分加密都已经被破解了。</p>\n<p>主要用到的一些工具。</p>\n<div class='md-table-wrapper'><table>\n<thead>\n<tr>\n<th>项目</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>NS 相关：</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/SciresM/hactool\" target=\"_blank\" rel=\"noopener\">SciresM/hactool</a></td>\n<td>用于 nsp/nca 等文件的解包</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/The-4n/hacPack\" target=\"_blank\" rel=\"noopener\">The-4n/hacPack</a></td>\n<td>用于 nsp/nca 等文件的打包</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Mages 相关：</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/UlyssesWu/FreeMote\" target=\"_blank\" rel=\"noopener\">UlyssesWu/FreeMote</a></td>\n<td>用于 Mages 大部分 psb 资源的重打包</td>\n</tr>\n<tr>\n<td>nutcrack.exe</td>\n<td>用于将 scripts.psb 中的 nut scripts 逆向成源代码</td>\n</tr>\n<tr>\n<td><a href=\"http://SQuirrelCNut.bt\" target=\"_blank\" rel=\"noopener\">SQuirrelCNut.bt</a> + 010Editor</td>\n<td>魔改版，用于二进制修改编译后的 nut script binary</td>\n</tr>\n</tbody>\n</table></div>\n<p>（nutcrack.exe 和 <a href=\"http://SquirrelCNut.bt\" target=\"_blank\" rel=\"noopener\">SquirrelCNut.bt</a> 之后会放在 github repo 中）</p>\n<h2 id=\"other-works-%2F-%E5%85%B6%E4%BB%96%E5%B7%A5%E4%BD%9C\" tabindex=\"-1\">Other works / 其他工作</h2>\n<div class=\"alert\">\n<p>这一部分其实和 AC 汉化关系不大，可以直接跳过哦。</p>\n</div>\n<h3 id=\"ns-%E7%9B%B8%E5%85%B3\" tabindex=\"-1\">NS 相关</h3>\n<p>NS 相关的解包教程说实话其实挺少的（大部分都是一键脚本）。姑且留在这里做个记录。</p>\n<h4 id=\"%E8%A7%A3%E5%8C%85%E6%B5%81%E7%A8%8B\" tabindex=\"-1\">解包流程</h4>\n<blockquote>\n<p><a href=\"https://wiki.no-intro.org/index.php?title=Nintendo_Switch_Digital_Software_Dumping_Guide\" target=\"_blank\" rel=\"noopener\">https://wiki.no-intro.org/index.php?title=Nintendo_Switch_Digital_Software_Dumping_Guide</a></p>\n</blockquote>\n<pre><code class=\"language-shell\"># 解包 nsp\nhactool -k &lt;prod.keys&gt; --pfs0dir=out -t pfs0  game.nsp\n</code></pre>\n<p>解包后，out 文件夹下会有若干 nca 文件。一般最大的那个 nca 就是我们的游戏主体。</p>\n<p>一般而言，我们可以用 <code>hactool -k &lt;prod.keys&gt; xxxx.nca -i</code> 来看对应 nca 的类型。例如</p>\n<pre><code class=\"language-shell\">Content Type:    Control\n</code></pre>\n<p>我们游戏一般是在 Program 里面，除此之外另一个比较重要的东西是 control.nca，里面包含游戏的版本号，各国语言下的名字，游戏的图标等等信息。</p>\n<div class=\"note\">\n<p>nca 一般是由若干个 section 组成，对于 Program 来说 section0 为 exefs（游戏的可执行程序），section1 为 romfs。对于 control nca 来说只有一个 section0.</p>\n</div>\n<p>解包 nca 使用的是：</p>\n<pre><code class=\"language-shell\"># 解包 program 类型的 nca（exefs + romfs）\nhactool -k &lt;prod.keys&gt; --romfsdir=&quot;romfs&quot; --exefsdir=&quot;exefs&quot; program.nca\n\n# 解包 control 类型的 nca (section0)\nhactool -k &lt;prod.keys&gt; --section0dir=&quot;control&quot; control.nca\n\n# 有时候需要提供 titlekey 进行解码，这时候需要加入一个类似于如下的 titlekey\n# 不要和游戏的 titleid 搞混\n--titlekey &lt;hex 32 chars&gt;\n</code></pre>\n<div class=\"info\">\n<p><code>titlekey</code> 可以通过 nsp 解包出来的 tik 文件获得，位置在 &lt;tik&gt; 文件的 0x180 偏移开始。</p>\n<p>你也可以直接用 <code>nstool -t tik &lt;xxxx.tik&gt; &gt; tik_info.txt</code> 获得 titlekey</p>\n</div>\n<h5 id=\"upd-nsp\" tabindex=\"-1\">upd nsp</h5>\n<p>对于 update 更新档，解包 nsp 之后拿到的 nca 是一个 update type。需要利用原版 nca 进行解包</p>\n<pre><code class=\"language-shell\"># 解包 program 类型的 nca（exefs + update）\nhactool -k &lt;prod.keys&gt; --romfsdir=&quot;romfs&quot; --exefsdir=&quot;exefs&quot; --base base.nca program.nca\n</code></pre>\n<p>说起来你可能不信，但是 ns 的更新包是一个二进制差分文件。。。里面利用 binary tree 描述了目标文件和 base 的二进制差异(romfs 层级)。就离谱。。</p>\n<h4 id=\"%E6%89%93%E5%8C%85%E6%B5%81%E7%A8%8B\" tabindex=\"-1\">打包流程</h4>\n<p>打包流程相对来说简单不少。<spoiler>虽然按照 romfs 发布的话。。其实也不用打包 nsp 了。</spoiler></p>\n<blockquote>\n<p>无耻的直接抄 makefile 了 &lt;== 已经忘光了怎么打包了捏</p>\n</blockquote>\n<pre><code class=\"language-shell\"># 打包 control nca\nhacpack --type nca --ncatype control --titleid &lt;TITLEID&gt; -k &lt;prod.keys&gt; \\\n\t--backupdir /tmp/ --romfs ./control  --outdir control/out\n\n# 打包 program nca\n$(NS_PACK) --type nca --titleid $(TITLEID) -k $(NS_KEY) \\\n    --backupdir $(TMP_DIR)  \\\n    --exefsdir $(EXEFS_DIR) \\\n    --romfsdir $(ROMFS_DIR) \\\n    --outdir $(NCA_OUT_DIR)\n    \n# 打包 NSP\n$(NS_PACK) --type nsp --titleid $(TITLEID) -k $(NS_KEY) \\\n    --backupdir $(TMP_DIR)  \\\n    --ncadir $(NSP_DUMP_DIR) \\\n    --outdir $(DIST_DIR)\n</code></pre>\n<h3 id=\"%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E%E7%9B%B8%E5%85%B3\" tabindex=\"-1\">游戏引擎相关</h3>\n<p>AC 用的是比较新的引擎，核心文件是 PSB 文件。利用 PsBuild PsPack 等工具可以做到对 psb 文件的解包和重打包。</p>\n<p>psb 文件的密钥可以通过用逆向工具在 exefs/main 中搜索 scripts.psb，往上翻几条指令就能看到，密钥是明文写在程序中的。</p>\n<h3 id=\"%E6%B8%B8%E6%88%8F%E6%B5%81%E7%A8%8B%E5%9B%BE%E5%AF%BC%E5%87%BA\" tabindex=\"-1\">游戏流程图导出</h3>\n<p>scenario 中的 json 是游戏的「脚本」文件（演出文件），规定了演出的各种参数。通过解析 json 大致上可以将整个游戏的流程用流程图的方式表现出来。</p>\n<p>scenairo 中也定义了一些全局变量，用于控制各种分支路线。</p>\n<p>最终的文件：<a href=\"https://github.com/kurikomoe/AnonymousCodeTranslation/blob/master/dist/scenario/flow.gv.pdf\" target=\"_blank\" rel=\"noopener\">https://github.com/kurikomoe/AnonymousCodeTranslation/blob/master/dist/scenario/flow.gv.pdf</a></p>\n<p>相关生成代码：<a href=\"https://github.com/kurikomoe/AnonymousCodeTranslation/blob/master/Tools/scene_track.py\" target=\"_blank\" rel=\"noopener\">https://github.com/kurikomoe/AnonymousCodeTranslation/blob/master/Tools/scene_track.py</a></p>\n<h2 id=\"methods-%2F-%E6%96%B9%E6%B3%95%E5%92%8C%E9%9A%BE%E7%82%B9\" tabindex=\"-1\">Methods / 方法和难点</h2>\n<h3 id=\"bc7-%E7%9B%B8%E5%85%B3\" tabindex=\"-1\">BC7 相关</h3>\n<p>AC 使用了 BC7 编码的图片。在初步解包的时候 FreeMote 还没有支持相应的图片解码（FreeMote 采用将解包的图片解码成 png 保存的方式）。</p>\n<p>目前最新版的 FreeMote 使用了 .net 上开源的一个 BCnEncoder 库，利用 CPU 编解码相应地 BC7 图片。</p>\n<p>实际测试下来，效率巨 TM 慢（最后打包的时候在 5900x 上需要 1h22m 才能完成所有图片的编码）。</p>\n<p>考虑到游戏引擎的的支持大概不会阉割掉 RGB 的支持，所以在测试阶段就突发奇想，如果强制所有图片使用 RGB 方式能不能让引擎正常载入呢？\n<img src=\"https://pic.kuriko.moe/2023/05/202305192330355.389da322b16d989b2e09c252fc503b1b.png\" alt=\"image-20230519233046729\" /></p>\n<p>Bingo！实际测试下来在实机和模拟器上是能正常使用的</p>\n<div class=\"alert\">\n<p>但是在长时间测试下，RGB 方式表示的图片可能会带来游戏闪退的问题。因此最终发布还是使用 BC7 的方式。</p>\n<p>另外，BC7 的高效编码可以使用 AMD 发布的 <a href=\"https://gpuopen.com/learn/compressonator-4-2/\" target=\"_blank\" rel=\"noopener\">Compressonator</a> 工具</p>\n<p><spoiler>但是栗子太懒了，懒得提 PR 改一个版本出来</spoiler></p>\n</div>\n<h3 id=\"nutscripts-%E7%9B%B8%E5%85%B3\" tabindex=\"-1\">NutScripts 相关</h3>\n<p>AC 的游戏引擎主体使用的是自己魔改过的 nutscript。</p>\n<p>nutscript 的研究在国外论坛上已经比较成熟了。对于 script 的解码也有相应地工具：nut.exe</p>\n<p>在某些特殊的情况下，纯文本的 nutscript 也能被引擎正常的载入，一般仅仅修改开头的一些变量程序仍能正常运行（很迷，不知道为什么）</p>\n<p>在另一些情况下，nutstript 的二进制 binary 可以通过 01editor 的 template 解码成指令，因此可以通过手改指令的方式修改一些内部变量和常量。</p>\n<p><a href=\"https://github.com/kurikomoe/AnonymousCodeTranslation/blob/master/Tools/nutcracker.exe\" target=\"_blank\" rel=\"noopener\">nutcrack.exe</a>, <a href=\"https://github.com/kurikomoe/AnonymousCodeTranslation/blob/master/Tools/SQuirrelCNut.bt\" target=\"_blank\" rel=\"noopener\">template</a></p>\n<h3 id=\"%E9%87%8D%E6%89%93%E5%8C%85%E7%9B%B8%E5%85%B3\" tabindex=\"-1\">重打包相关</h3>\n<p>重打包用的是 Makefile（实际上是一个败笔）</p>\n<p>原本希望利用 Makefile 的检测文件修改之后部分重新编译的机制。可惜后来发现因为经常性的源文件变动，不如自己手动选择 <code>make xxx.psb</code> 的方式。</p>\n<p>下一个项目应该会把脚本改成 <a href=\"https://github.com/casey/just\" target=\"_blank\" rel=\"noopener\">justfile</a> 的形式。</p>\n<p>重打包的要点就是一键自动化，最好将可能的所有以前用得到命令都写入 makefile 中，一个项目可能会持续长达一年，中间甚至因为人员变动，放假等等的问题会有半个月以上的空窗期。因此一个良好的 makefile 可以极大的提高你<code>逆向自己以前写的东西</code>的难度。</p>\n<h3 id=\"%E5%AD%97%E5%BA%93%E5%9B%BE\" tabindex=\"-1\">字库图</h3>\n<p>AC 的文本表示分为两个部分：对话框文本 + 其他。</p>\n<p>对话框主要使用 font 文件做渲染，读入标准 utf8 字符，所以只要提供一个完整的文件就可以解决字库问题。</p>\n<p>其他主要包括 tips，上标文本，这些用的是字体图的方式。添加新的文本需要修改字库图。</p>\n<p>字库图的定义文件主要是：</p>\n<pre><code class=\"language-json\">        &quot;!&quot;: {\n            &quot;a&quot;: 0,\n            &quot;b&quot;: 0,\n            &quot;d&quot;: 0,\n            &quot;id&quot;: 0,\n            &quot;w&quot;: 4,\n            &quot;h&quot;: 16,\n            &quot;height&quot;: 18,\n            &quot;width&quot;: 4,\n            &quot;x&quot;: 24,\n            &quot;y&quot;: 4\n        },\n</code></pre>\n<p>其中 <code>a,b,d,w,h,height,width</code> 分别定义了 font 的各种参数，具体上我们并没有很明确每个参数的实际意义，处于一种「这玩意调出来能 work」的状态。</p>\n<p>可能 AC 的 PC 版出来后还需要对这些进行微调。</p>\n<p>参照：<a href=\"https://zhuanlan.zhihu.com/p/30169829\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/30169829</a></p>\n<p><img src=\"https://pic.kuriko.moe/2023/05/202305201936205.da28d0981f9f77935726795474a69673.png\" alt=\"image-20230520193545471\" /></p>\n<h3 id=\"%E8%AF%AD%E8%A8%80%E6%96%87%E6%9C%AC%E5%90%8C%E6%AD%A5\" tabindex=\"-1\">语言文本同步</h3>\n<p>文本同步使用的是坚果云，由咱提供主帐号，其他人用免费帐号协作的方式（3GiB 月流量限制，不过对于纯文本同步也够了，修图那边另说）。</p>\n<p>坚果云的好处是多端同步，即使在 Linux 上也能正常同步。同时提供 webdav 接口，可以方便的部署 CI。</p>\n<p>另外坚果云的版本历史功能大概拯救了整个项目文件 114514 次叭。（同时也是一个完美的 git blame 机会，康康是谁改动的文件，背锅，立即背锅！）</p>\n<h3 id=\"%E6%B1%89%E5%8C%96%E5%8F%91%E5%B8%83\" tabindex=\"-1\">汉化发布</h3>\n<div class=\"alert\">\n<p>我们行走在灰色的绳索上，在版权的万丈深渊之上，小心翼翼的维持着最后的平衡。</p>\n</div>\n<p>最终汉化发布使用的是 romfs mod 的形式。考虑到版权问题，分发可执行 NSP/EXE 的合规风险过大。</p>\n<p>在最终采用 romfs mod 形式之前，也有过第二种方案：upd</p>\n<p>upd 是 nsp 的 update 档，在可以对 base nsp 进行升级。具体的细节可能有空咱会再写一个 post。</p>\n<p>可惜清明假期咱努力了两天，最终没办法完美复现一个 nsp upd，最终的成果是一个全量 upd 包（乐），aka，这个 upd 包和 base nsp 一样大，但是不可执行，必须持有原始 nsp 才能 apply update。</p>\n<p>这种的好处在于，我们能够通过 upd 来修改 base nsp 中的各个字段，比如把游戏名字改成 AnonymousCode 汉化版啦，把游戏版本号改成  114.514 之类的。</p>\n<p>可惜这种方式「不完美实现版」因为体积过大，被上面否了。QAQ</p>\n<p><spoiler>明明很帅的呀！</spoiler></p>\n<h3 id=\"%E5%BD%A9%E8%9B%8B%EF%BC%81%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81%E6%9B%B4%E5%A4%9A%E7%9A%84%E5%BD%A9%E8%9B%8B%EF%BC%81\" tabindex=\"-1\">彩蛋！我们需要更多的彩蛋！</h3>\n<div class=\"note\">\n<img src=\"https://pic.kuriko.moe/2023/04/202304232238947.b6647ca8dc7b1829be8ed4ddc582e06f.png\" alt=\"image-20230423223733021\" style=\"zoom: 67%;\" />\n<p>一个基于 gpt4 的玩意。</p>\n</div>\n<p>汉化最主要的动力其实就是承认感叭，所以署名还是很重要的。</p>\n<p>为了防止汉化组的相关信息被抹掉（以及被二次分发），目前主流的办法是将汉化组信息写入开头 log 中（这个很简单，修图就好了）</p>\n<p>AC 中我们实现了一个比较花哨的版权信息，如图：</p>\n<img src=\"https://pic.kuriko.moe/2023/04/202304232240749.21bfd30a96e9d95041842be3b9adfcf5.png\" alt=\"image-20230423223956706\" style=\"zoom:50%;\" />\n<p>在 TIPS 中我们新增了一项 No.100，该 TIPS 会在游戏开始后触发，同时可以在 tips list 中查阅到。</p>\n<p>实现这个的难点主要是对 scripts.psb, config.psb 和 motion.psb 的修改。</p>\n<ol>\n<li>config.psb</li>\n</ol>\n<p>tips 的文本信息在 config.psb/tips.psb.m.json 中定义。原始文件中一共定义了 99 个 tips，我们只要在最后新增一个就好了。</p>\n<p>另外 conv_d2i 是将 tips id 和其它什么 id 相对应（有点忘了，存疑），我们新增的 No.100 tips 的映射就是自己对应自己。所以都填 99 就行了。</p>\n<ol start=\"2\">\n<li>motion.psb</li>\n</ol>\n<p>tips 的头图信息定义在 motion.psb/ac_tips.psb.m.json 中。其中 time 可以认为是 tips 编号。这里面有一个坑是 147 号图及以后都强制用 146 aka tips 98 的图。导致你 conv_d2i 不管填多大都是一个头图。。。（当时就很疑惑，怎么不管咱怎么改丢失一个莫名其妙的图）</p>\n<pre><code class=\"language-json\">                },{\n                  &quot;content&quot;: {\n                    &quot;coord&quot;: [0.66699999570846558,0,0],\n                    &quot;icon&quot;: &quot;0147&quot;,\n                    &quot;mask&quot;: 2,\n                    &quot;src&quot;: &quot;tex&quot;\n                  },\n                  &quot;time&quot;: 99,\n                  &quot;type&quot;: 2\n                },{\n                  &quot;content&quot;: {\n                    &quot;coord&quot;: [0.66699999570846558,0,0],\n                    &quot;icon&quot;: &quot;0999&quot;,\n                    &quot;mask&quot;: 2,\n                    &quot;src&quot;: &quot;tex&quot;\n                  },\n                  &quot;time&quot;: 100,\n                  &quot;type&quot;: 2\n                },{\n</code></pre>\n<ol start=\"3\">\n<li>script.psb</li>\n</ol>\n<p>script 是最坑的一个地方，通过 nutcrack 逆向代码可以看到，tips 被强制 0 -&gt; 99，根本没有多余的地方新增一个 tips</p>\n<pre><code class=\"language-json\">\t\tfor( idx = 0; idx &lt; 99; idx++ )\n\t\t{\n\t\t\tif (this.getDictionaryAquired(this.m_tips_data.conv_d2i[idx]))\n\t\t\t{\n\t\t\t\tlocal elm = {\n\t\t\t\t\tno = idx,\n\t\t\t\t\tname = this.m_tips_list[idx].name\n\t\t\t\t};\n\t\t\t\tthis.appendItem(elm, idx);\n\n\t\t\t\tif (!this.getDictionaryRead(this.m_tips_data.conv_d2i[idx]))\n\t\t\t\t{\n\t\t\t\t\tlocal elm = {\n\t\t\t\t\t\tno = idx,\n\t\t\t\t\t\tname = this.m_tips_list[idx].name\n\t\t\t\t\t};\n\t\t\t\t\tthis.m_unread_items.append(elm);\n\t\t\t\t}\n\t\t\t}\n</code></pre>\n<p>不过好在我们可以利用 010editor 的 template，搜索 99 相关的立即数，定位到循环语句所在的函数，把这个立即数改成 100 即可。这样就能给游戏新增一个 tips 了。</p>\n<h2 id=\"experience-%2F-%E7%BB%8F%E9%AA%8C%E5%92%8C%E6%95%99%E8%AE%AD\" tabindex=\"-1\">Experience / 经验和教训</h2>\n<p>AC 项目大概是咱第一次系统性的参与某个有组织的汉化（以前的 hacknet 不算，咱自己搞的小汉化组一共也就 5 个人，而且没有校对等等流程，突出一个小作坊）</p>\n<p>如果总结一下这个项目的经验教训的话，有如下几点：</p>\n<h3 id=\"%E5%B7%A5%E4%BD%9C%E9%A1%B9%E7%9B%AE%E5%90%8C%E6%AD%A5\" tabindex=\"-1\">工作项目同步</h3>\n<p>求求大家别用 QQ 分享文件了，要么被 TX 封，要么文件失效。分享了一些奇怪的文本后你群都可能没了（没错，我们 tx 文档因为 AC 文本里面涉及的阴谋论等文本被封过一次）。</p>\n<p>一个良好的，多端的，及时的，有历史记录的，不会被莫名其妙封掉的同步软件是很重要的。</p>\n<p>目前境内可用的咱推荐是坚果云，多端同步，权限划分都可以。</p>\n<p>境外的目前没想好，理论上 onedrive(sharepoit) 应该都行，但是这些对于 CI 可能不是很友好。</p>\n<h3 id=\"%E9%9D%99%E6%80%81%E6%A3%80%E6%9F%A5\" tabindex=\"-1\">静态检查</h3>\n<blockquote>\n<p>你永远不知道水平参差不齐的翻译能给你搞出什么神奇翻译</p>\n</blockquote>\n<p>由于程序无法检查汉化文本（语义的正确与否），因此程序更多的是对控制符等的检查。</p>\n<p>在 AC 中，需要确保：</p>\n<p>一级检查</p>\n<ol>\n<li>原始汉化文本未被改动（没错，有人真的会不小心改变原始文本）</li>\n</ol>\n<p>AC 的 excel 文本格式为： 原文，说话人，译文，校对，其他。</p>\n<p>原文用于重导入，因此需要强检查原文是否一致，防止导入出问题。</p>\n<ol start=\"2\">\n<li>控制符一致：这个主要是 tips 控制符保证两段对齐。</li>\n</ol>\n<p>二级检查</p>\n<ol>\n<li>标点正确：防止汉化中中英文标点混用，这个可以很大的减少校对的心智负担</li>\n<li>专名正确：这个主要是对一些名词施行黑名单，主要来自于术语表有的翻译真的不会去看。\n<ol>\n<li>例如：大师级，公里/千米，即视感/既视感</li>\n</ol>\n</li>\n</ol>\n<p>一个良好的静态检查能够给大家节省很多事情。。真的。</p>\n<h2 id=\"conclusion-%2F-%E6%80%BB%E7%BB%93%E5%92%8C%E5%B1%95%E6%9C%9B\" tabindex=\"-1\">Conclusion / 总结和展望</h2>\n<p>说实话，汉化中比较累的有：</p>\n<ol>\n<li>全干党：翻译，改图，对接，项目管理一个不落。</li>\n<li>管理：校对和翻译都是耗材。维持整个项目不咕的灵魂。</li>\n<li>校对：汉语10级，日语N0。</li>\n<li>（没啥基础工具的）程序：从头到尾，随时 oncall，文本导入加检查，程序查错，打包测试版。\n<ol>\n<li>甚至校对发现名词错误后，你还要写脚本刷整个项目文件来检查哪些地方出错了。</li>\n<li><spoiler>咱给 AC 写的 python 占了全年的 50%。。</spoiler></li>\n</ol>\n</li>\n</ol>\n<p>目前 AC 结束后，下一个可能的坑是 ChaosHeadNoah。这个也还算简单，基础的工作已经解决了，接下来就是等文本和修字库的一些问题了。</p>\n<p><spoiler>虽然感觉又是一个填坑。心累</spoiler></p>\n<h2 id=\"appendix-%2F-%E5%BD%A9%E8%9B%8B\" tabindex=\"-1\">Appendix / 彩蛋</h2>\n<h3 id=\"ac-%E6%B1%89%E5%8C%96%E6%97%B6%E9%97%B4%E7%BA%BF%EF%BC%9A\" tabindex=\"-1\">AC 汉化时间线：</h3>\n<ul>\n<li>\n<p>2022 年 6 月，栗子通过 NGA 本月游戏发售列表了解到 Anonymous;Code 即将发售</p>\n<ul>\n<li>同月，Anonymous;Code 体验版 Demo 上线 ns eshop (甚至还在 NGA 上水了一帖)</li>\n<li>栗子在 B 站看到 AC 体验版的先行影像，十分怀疑汉化组的汉化方法（NS 也能汉化，什么技术力！），经过逐帧对比，发现是坑爹的视频汉化。。\n<ul>\n<li>栗子于贴吧发现<a href=\"https://tieba.baidu.com/p/7780156840\" target=\"_blank\" rel=\"noopener\">汉化招募贴</a>，发现有一位巨佬程序在汉化组，于是想去了解一下现在汉化的方法和技术。随申请加入汉化组Q群。</li>\n<li>\n<img src=\"https://pic.kuriko.moe/2023/04/202304180021769.153b8467b8c61dcaf4fcb946a55c408c.png\" alt=\"image-20230418002059740\" style=\"zoom:33%;\" />\n</li>\n<li><del>没想到他们真的是直接编辑视频做到的</del>，可惜当时程序大佬不在组里，说是项目拖不开身。</li>\n</ul>\n</li>\n<li>DEMO 发布后，Twitch 上有人直播「Oh boy, it is time to cram ANONYMOUS;CODE onto PC」将 AC 体验版利用「五等分的花嫁」PC 版套壳移植到 PC。</li>\n<li>github 相关解包工具 <a href=\"https://github.com/UlyssesWu/FreeMote\" target=\"_blank\" rel=\"noopener\">UlyssesWu/FreeMote</a>  提出支持 Anonymous;Code 中用到的 BC7 的支持的 <a href=\"https://github.com/UlyssesWu/FreeMote/issues/85\" target=\"_blank\" rel=\"noopener\">issue</a>。</li>\n<li>栗子魔改 <a href=\"https://github.com/UlyssesWu/FreeMote/issues/85\" target=\"_blank\" rel=\"noopener\">UlyssesWu/FreeMote</a>，用 .net 中的 BCnEncoder 库实现了一个简单版本的 BC7 Decoder，初步实现了解包。\n<ul>\n<li>解包主要包含：\n<ul>\n<li>config.psb: tips，一些程序说明（请不要关闭电源等），还有。。漫画扳机(manga trigger)\n<ul>\n<li>由于体验版中没删啥东西，导致基本上泄漏完了，匿码死了等言论开始出现。</li>\n</ul>\n</li>\n<li>scripts.psb: 游戏的（非剧情相关）脚本，主要是由 nut script 字节码组成。</li>\n<li>motion.psb：游戏的几乎所有的背景图，live2d 等。</li>\n<li>scenario.psb: 游戏的剧情脚本，涉及所有的剧情文本。\n<ul>\n<li>这个他们倒是没有忘了删，谢天谢地。</li>\n</ul>\n</li>\n<li>voice.psb: 声优大大们的演出<spoiler>适合丢给 vits 训练</spoiler></li>\n<li>fonts.psb: 字库图（头大ing）</li>\n<li>images.psb：精灵图，背景图等，略。</li>\n<li>sound.psb：音效，略。</li>\n<li>map.psb：忘了有啥了，反正不是很重要。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>汉化组招募大致结束，初步奠定了接下来的主要成员。<spoiler>见 Appendix</spoiler></li>\n<li>栗子将 demo 的 scenario 中的 texts 重新导出为 xlsx，作为汉化的基础。\n<ul>\n<li>可惜后来用的是 HimuL 导出的版本了，还在之后给咱埋了个坑。</li>\n</ul>\n</li>\n<li>受限于时间关系，汉化组采用原计划，使用视频汉化的形式对体验版部分进行了汉化，于B站发布视频「<a href=\"https://www.bilibili.com/video/BV1Na411X73n/\" target=\"_blank\" rel=\"noopener\">【中字】匿名代码体验版影像（1-1) / 科学ADV系列最新作</a>」</li>\n</ul>\n</li>\n<li>\n<p>2022 年 7 月，Anonymous;Code 发售</p>\n<ul>\n<li>7 月 6 日， UlyssesWu/FreeMote 在 <a href=\"https://github.com/UlyssesWu/FreeMote/commit/6cee74a3a3ad7314e3cef38623f7efa68cf0b2f8\" target=\"_blank\" rel=\"noopener\">commit 4436794</a> 中实现了 BC7 的 Encoder &amp; Decoder。</li>\n<li>黄金の轰龙通过 PY 交易，买了一个采集卡。用于录制 NS 实机画面。（防止一些模拟器 bug）</li>\n<li>当其他人在推模拟器的时候，栗子沈迷用 diagram 结合 scenario 的脚本生成流程图（最终还挺好康的）</li>\n<li>想把 AC 移植到 PC 是木大的，但是积累的工具链在以后将大有作用（指 TIPS）</li>\n</ul>\n</li>\n<li>\n<p>接下来就是一些流水帐事务，总结下来就是一个无情的 <code>make -B all</code> 机器。但是还是有一些小插曲：</p>\n<ul>\n<li>字库图是真滴难搞。熬夜两个晚上去猜参数。</li>\n<li>鬼知道怎么会有命名为 ac_xx_yy[abc] 这种文档的存在。导致中途一部分文档没有被打包进去。\n<ul>\n<li>顺便最终完成量是 103.269% 乐</li>\n</ul>\n</li>\n<li>你们翻译能不能用点心，每次打包的 static check 都能挂，搁这程序来当校对是吧。</li>\n<li><spoiler>栗子被另一个相关群的某人气到中途跑路了一周。</spoiler></li>\n</ul>\n</li>\n<li>\n<p>2023 年 4 月，Anonymous;Code 视频版最终话发布！撒花</p>\n<ul>\n<li>\n<p>汉化组对最终发布汉化补丁的形式进行了「激烈地」讨论，主要有两个方案：</p>\n<ul>\n<li>upd nsp</li>\n<li>romfs patch</li>\n</ul>\n</li>\n<li>\n<p>感谢清明假期，研究 ns upd 报废了假期一整天。。最终还是木大。所以定下来了用传统 romfs patch 的方式发布。</p>\n</li>\n<li>\n<p>关于如何塞 Credit 汉化组展开了讨论，考虑到重分发和其他人重打包问题，如何保存下 Credit Info 还是蛮重要的。</p>\n<ul>\n<li>\n<ol>\n<li>\n<p>塞 readme 里面（当然）</p>\n</li>\n<li>\n<p>塞 启动画面 里面。（很简单，修图就好了）</p>\n</li>\n<li>\n<p>塞。。。TIPS 里面。。。。<spoiler>咱宣布，万恶之源：<img src=\"https://pic.kuriko.moe/2023/04/202304232151922.f6d739f6166401bee19ceca8369e840e.png\" alt=\"image-20230423215036352\" style=\"zoom: 25%;\" /> </spoiler></p>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>2023 年 5 月，ns 汉化 patch 正式发布。撒花！</p>\n</li>\n<li>\n<p>TBC，等待 AC PC 发布。</p>\n</li>\n</ul>\n<h3 id=\"%E4%B8%80%E4%BA%9B%E7%A2%8E%E7%A2%8E%E5%BF%B5\" tabindex=\"-1\">一些碎碎念</h3>\n<div class=\"info\">\n<p>汉化从来不是一个简单的事情，一部游戏的汉化可能涉及到十几位翻译和校对的努力，几位项目管理持续一年的项目规划（以及虐杀鸽子）。</p>\n<p>相比之下，程序的工作主要集中在前期（是的，当你分析完程序，写完自动化脚本后就能挂机了，乐）</p>\n</div>\n<p>最后，再次向所有参与 Anonymous;Code 汉化的 Stuff 献上敬意：</p>\n<div class=\"alert\">\n<p>匿名者汉化组 汉化成员名单：</p>\n<p>统筹/监制：反物质委员会</p>\n<p>人事：风之汐</p>\n<p>主催：听风落羽、星云nebulas、芃音Rsk、Slie-wdy</p>\n<p>程序：KurikoMoe、HimuL</p>\n<p>翻译：蛋堡、cdxxxxx、小彗、Mikoi、秋叶原、雨宫、带水怪、小鲲、Takuru、ゲロぷ、Colin Lovecraft、Crella、SanadaAkira、lancet、LOST、Neet、青馨、konec、坂井泉水、星云nebulas</p>\n<p>校对：koneco、7+8=15、天光逸、青馨、sanadaAkira、like_kind、太子、Neet、Colin Lovecraft、星影、星云nebulas</p>\n<p>修图：芃音Rsk、星云nebulas、MadSamurai、Dialektik</p>\n<p>字幕：芃音Rsk、星云nebulas</p>\n<p>考据：芃音Rsk、Slie-wdy</p>\n<p>录制：黄金の轰龙</p>\n<p>视频：芃音Rsk</p>\n</div>\n","toc":[{"content":"Introduction","slug":"introduction","lvl":2,"i":0,"seen":0},{"content":"Background","slug":"background","lvl":2,"i":1,"seen":0},{"content":"Other works / 其他工作","slug":"other-works-/-%E5%85%B6%E4%BB%96%E5%B7%A5%E4%BD%9C","lvl":2,"i":2,"seen":0},{"content":"NS 相关","slug":"ns-%E7%9B%B8%E5%85%B3","lvl":3,"i":3,"seen":0},{"content":"解包流程","slug":"%E8%A7%A3%E5%8C%85%E6%B5%81%E7%A8%8B","lvl":4,"i":4,"seen":0},{"content":"upd nsp","slug":"upd-nsp","lvl":5,"i":5,"seen":0},{"content":"打包流程","slug":"%E6%89%93%E5%8C%85%E6%B5%81%E7%A8%8B","lvl":4,"i":6,"seen":0},{"content":"游戏引擎相关","slug":"%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E%E7%9B%B8%E5%85%B3","lvl":3,"i":7,"seen":0},{"content":"游戏流程图导出","slug":"%E6%B8%B8%E6%88%8F%E6%B5%81%E7%A8%8B%E5%9B%BE%E5%AF%BC%E5%87%BA","lvl":3,"i":8,"seen":0},{"content":"Methods / 方法和难点","slug":"methods-/-%E6%96%B9%E6%B3%95%E5%92%8C%E9%9A%BE%E7%82%B9","lvl":2,"i":9,"seen":0},{"content":"BC7 相关","slug":"bc7-%E7%9B%B8%E5%85%B3","lvl":3,"i":10,"seen":0},{"content":"NutScripts 相关","slug":"nutscripts-%E7%9B%B8%E5%85%B3","lvl":3,"i":11,"seen":0},{"content":"重打包相关","slug":"%E9%87%8D%E6%89%93%E5%8C%85%E7%9B%B8%E5%85%B3","lvl":3,"i":12,"seen":0},{"content":"字库图","slug":"%E5%AD%97%E5%BA%93%E5%9B%BE","lvl":3,"i":13,"seen":0},{"content":"语言文本同步","slug":"%E8%AF%AD%E8%A8%80%E6%96%87%E6%9C%AC%E5%90%8C%E6%AD%A5","lvl":3,"i":14,"seen":0},{"content":"汉化发布","slug":"%E6%B1%89%E5%8C%96%E5%8F%91%E5%B8%83","lvl":3,"i":15,"seen":0},{"content":"彩蛋！我们需要更多的彩蛋！","slug":"%E5%BD%A9%E8%9B%8B%EF%BC%81%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81%E6%9B%B4%E5%A4%9A%E7%9A%84%E5%BD%A9%E8%9B%8B%EF%BC%81","lvl":3,"i":16,"seen":0},{"content":"Experience / 经验和教训","slug":"experience-/-%E7%BB%8F%E9%AA%8C%E5%92%8C%E6%95%99%E8%AE%AD","lvl":2,"i":17,"seen":0},{"content":"工作项目同步","slug":"%E5%B7%A5%E4%BD%9C%E9%A1%B9%E7%9B%AE%E5%90%8C%E6%AD%A5","lvl":3,"i":18,"seen":0},{"content":"静态检查","slug":"%E9%9D%99%E6%80%81%E6%A3%80%E6%9F%A5","lvl":3,"i":19,"seen":0},{"content":"Conclusion / 总结和展望","slug":"conclusion-/-%E6%80%BB%E7%BB%93%E5%92%8C%E5%B1%95%E6%9C%9B","lvl":2,"i":20,"seen":0},{"content":"Appendix / 彩蛋","slug":"appendix-/-%E5%BD%A9%E8%9B%8B","lvl":2,"i":21,"seen":0},{"content":"AC 汉化时间线：","slug":"ac-%E6%B1%89%E5%8C%96%E6%97%B6%E9%97%B4%E7%BA%BF%EF%BC%9A","lvl":3,"i":22,"seen":0},{"content":"一些碎碎念","slug":"%E4%B8%80%E4%BA%9B%E7%A2%8E%E7%A2%8E%E5%BF%B5","lvl":3,"i":23,"seen":0}],"slug":"Projects/汉化/Anonymous;Code/总结","published":true,"date":"2023-04-17T16:00:00.000Z","updated":"2023-05-20T12:15:58.000Z","photos":[],"link":"","path":"Projects/汉化/Anonymous;Code/总结/","permalink":"https://kuriko.moe/2023/04/18/Projects/%E6%B1%89%E5%8C%96/Anonymous;Code/%E6%80%BB%E7%BB%93/","api_path":"api/articles/Projects/汉化/Anonymous;Code/总结.json","keywords":null,"cover":"https://pic.kuriko.moe/2023/05/202305192330355.389da322b16d989b2e09c252fc503b1b.png","config":{"max_toc_level":4},"categories":[],"tags":[{"name":"汉化组","path":"api/tags/汉化组.json"},{"name":"逆向","path":"api/tags/逆向.json"},{"name":"总结","path":"api/tags/总结.json"}]}