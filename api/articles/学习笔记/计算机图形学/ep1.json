{"title":"现代计算机图形学入门 学习笔记","subtitle":"栗子の计算机三大圣经夢","author":"Kuriko Moe (栗子Chan)","excerpt":"<p>计算机三大浪漫其一：计算机图形学。</p>\n<p>本期参考教程：<a href=\"https://www.bilibili.com/video/BV1X7411F744\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/BV1X7411F744</a></p>\n<p><strong>前导词</strong>：操作系统，编译器，计算机图形学又称计算机领域的三大浪漫。</p>\n<ol>\n<li>编译器将程序媛的思考翻译为机器指令。</li>\n<li>操作系统定义了机器指令和现实中硬件的交互方式。</li>\n<li>计算机图形学用01数据虚拟出一个不同于现实的世界。</li>\n</ol>\n","render_content":"<p>计算机三大浪漫其一：计算机图形学。</p>\n<p>本期参考教程：<a href=\"https://www.bilibili.com/video/BV1X7411F744\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/BV1X7411F744</a></p>\n<p><strong>前导词</strong>：操作系统，编译器，计算机图形学又称计算机领域的三大浪漫。</p>\n<ol>\n<li>编译器将程序媛的思考翻译为机器指令。</li>\n<li>操作系统定义了机器指令和现实中硬件的交互方式。</li>\n<li>计算机图形学用01数据虚拟出一个不同于现实的世界。</li>\n</ol>\n<!-- more -->\n<h1 id=\"prologue\" tabindex=\"-1\">Prologue</h1>\n<p>课程的主要内容：</p>\n<ol>\n<li>光栅化 Rasterization</li>\n<li>Curves and Meshes</li>\n<li>Ray Tracing</li>\n<li>Animation/Simulation</li>\n</ol>\n<div class=\"note\">\n<p><strong>光栅化：</strong></p>\n<p>Project geometry primitives(3D triangles / polygons) onto the screen</p>\n<p>Break projected primitives into fragments(pixels)</p>\n<p>Gold standard in Video Games</p>\n<p><strong>几何（Curves and Meshes）:</strong></p>\n<p>How to represent geometry in Computer Graphics.</p>\n<p><strong>光线追踪(Ray Tracing):</strong></p>\n<p>Shot rays from the camera through each pixel</p>\n<p>Gold standard in Animation/Movies (Offline Application)</p>\n<p><strong>仿真（Animation Simulation):</strong></p>\n<p>Key frame animation</p>\n<p>Mass-spring system</p>\n</div>\n<h1 id=\"p2-review-of-linear-algebra\" tabindex=\"-1\">P2 Review of Linear Algebra</h1>\n<h2 id=\"related-references\" tabindex=\"-1\">Related References</h2>\n<blockquote>\n<p>虎书《Fundamental of Computer Graphics》相关章节：</p>\n<p>Chapter 2: Miscellaneous Math</p>\n<p>Chapter 5: Linear Algebra</p>\n</blockquote>\n<h2 id=\"lecture\" tabindex=\"-1\">Lecture</h2>\n<p>计算机图形学的前置技能树：</p>\n<ol>\n<li>Basic mathematics\n<ol>\n<li>Linear Algebra, Calculus, Statistics</li>\n</ol>\n</li>\n<li>Basic physics\n<ol>\n<li>Optics, Mechanics</li>\n</ol>\n</li>\n<li>Misc\n1.<strong>Signal Processing</strong>, Numberical analysis</li>\n</ol>\n<blockquote>\n<p>走样，反走样技术：来自于 signal processing</p>\n<p>积分，渲染等实际上是在解决数值计算问题。</p>\n</blockquote>\n<h3 id=\"vectors\" tabindex=\"-1\">Vectors</h3>\n<p>\\(\\vec{a}\\)：向量。\\(||\\vec{a}||\\)：向量的长度（模，二范数）。\\(\\hat{a} = \\vec{a} / ||\\vec{a}||\\)：向量的方向向量。\n\\[\n\\frac{ \\vec{a} \\cdot \\vec{b} }{||\\vec{a}|| \\times ||\\vec{b}||} = \\cos{\\theta}\n\\]</p>\n<p>\\[\n||\\vec{a} \\times \\vec{b} || = ||\\vec{a}|| ||\\vec{b}|| \\sin{\\theta}\n\\]</p>\n<p>\\[\n\\vec{a} \\times \\vec{b} = \\begin{pmatrix}\ny_a z_b - y_b z_a \\\\\nz_a x_b - x_a z_b \\\\\nx_a y_b - y_a x_b\n\\end{pmatrix}\n\\]</p>\n<p>Cross Production: 判断左右，内外</p>\n<div class=\"note\">\n<img src=\"https://kurikomoe-1300672427.image.myqcloud.com/images/image-20210306160928180.png\" alt=\"image-20210306160928180\" style=\"zoom:67%;\" />\n<p>\\(\\vec{AP} \\times \\{\\vec{AB}, \\vec{BC}, \\vec{CA}\\} = \\{+, +, +\\}\\) 来判断在三角形内部。ddd</p>\n<p>应用：三角形光栅化。</p>\n</div>\n<h3 id=\"matrix\" tabindex=\"-1\">Matrix</h3>\n<p>2D refluection about y-axis\n\\[\n\\begin{pmatrix} \n-1 &amp; 0 \\\\\n0 &amp; 1\n\\end{pmatrix} \\begin{pmatrix}\nx \\\\ y\n\\end{pmatrix} = \\begin{pmatrix} -x \\\\ y \\end{pmatrix}\n\\]\nTranspose: \\((AB)^T = B^T A^T\\)</p>\n<p>Identity Matrix: \\((AB)^{-1} = B^{-1} A^{-1}\\)</p>\n<h1 id=\"p3-transformation\" tabindex=\"-1\">P3 Transformation</h1>\n<div class=\"note\">\n<p>阅读材料：第 6 章（Transformation Matrices），第 6.1、6.3 节</p>\n</div>\n<div class=\"info\">\n<p>Today's topic:</p>\n<ol>\n<li>Why study transformation</li>\n<li>2D transfromations: rotation, scale, shear(切变)</li>\n<li>Homogeneous coordinates (齐次坐标)</li>\n<li>Composing transforms (变换的组合)</li>\n<li>3D transformations</li>\n</ol>\n</div>\n<p>modeling transformation(模型变换)</p>\n<p>viewing transformation(视图变换): 3D to 2D projection(投影)</p>\n<h2 id=\"2d-transformation\" tabindex=\"-1\">2D Transformation</h2>\n<div class=\"info\">\n<p>都是初中数学知识，快速过一下就好了</p>\n</div>\n<ol>\n<li>Scale: 数学表达</li>\n</ol>\n<p>\\[\nx' = sx \n\\]</p>\n<p>\\[\ny' = sy\n\\]</p>\n<p>\\[\n\\begin{pmatrix}\nx' \\\\\ny'\n\\end{pmatrix} = \\begin{pmatrix}\ns_x &amp; 0 \\\\\n0 &amp; s_y\n\\end{pmatrix} \\begin{pmatrix}\nx \\\\\ny\n\\end{pmatrix}\n\\]</p>\n<p>如果 \\(s_x\\) \\(s_y\\) 存在负数，则表达了镜像反转</p>\n<ol start=\"2\">\n<li>Shear Matrix 切变矩阵</li>\n</ol>\n<img src=\"https://kurikomoe-1300672427.image.myqcloud.com/images/image-20210422213304293.png\" alt=\"image-20210422213304293\" style=\"zoom:67%;\" />\n$$\n\\begin{pmatrix} \nx' \\\\ \ny'\n\\end{pmatrix} = \\begin{pmatrix} \n1 & a \\\\\n0 & 1\n\\end{pmatrix} \\begin{pmatrix} \nx \\\\\ny\n\\end{pmatrix}\n$$\n解释：将图片按照 y 坐标成比例切变。\n<ol start=\"3\">\n<li>Rotation (about the origin (0, 0), CCW by default)</li>\n</ol>\n<img src=\"https://kurikomoe-1300672427.image.myqcloud.com/images/image-20210422213911790.png\" alt=\"image-20210422213911790\" style=\"zoom:50%;\" />\n$$\n\\begin{pmatrix} \nx' \\\\\ny'\n\\end{pmatrix} = \\begin{pmatrix} \n\\cos\\theta & -\\sin\\theta \\\\\n\\sin\\theta & \\cos\\theta \n\\end{pmatrix} \\begin{pmatrix} \nx \\\\\ny\n\\end{pmatrix}\n$$\n:::alert\n<p>Linear Transforms = Matrix (of the same dimension)</p>\n<p>:::</p>\n<p>特殊的变换：平移变换。需要引入「齐次坐标」，现有定义下，平移变换需要写成如下的形式：\n\\[\n\\begin{aligned}\n     x' &amp;= x + t_x \\\\\n    y' &amp;= y + t_y \\\\\n    \\begin{pmatrix} \n    x' \\\\\n    y'\n    \\end{pmatrix} &amp;= \\begin{pmatrix} \n    a &amp; b \\\\\n    c &amp; d\n    \\end{pmatrix} \\begin{pmatrix} \n    x \\\\ y\n    \\end{pmatrix} + \\begin{pmatrix} \n    t_x \\\\ t_y\n    \\end{pmatrix}\n\\end{aligned}\n\\]</p>\n<p>問題がある：如何把平移变换融入到线性变换中。</p>\n<p>-- 野生的「齐次坐标」出现啦</p>\n<p>Solution: Homogenous Coordinates</p>\n<p>Add a third coordinate (w-coordinate)</p>\n<ul>\n<li>2D point = \\((x, y, 1)^T\\)</li>\n<li>2D vector = \\((x, y, 0)^T\\)</li>\n</ul>\n<p>Matrix representation of translations:\n\\[\n\\begin{pmatrix}\nx' \\\\ y' \\\\ w'\n\\end{pmatrix} = \\begin{pmatrix}\n1 &amp; 0 &amp; t_x \\\\\n0 &amp; 1 &amp; t_y \\\\\n0 &amp; 0 &amp; 1 \\\\\n\\end{pmatrix} \\cdot \\begin{pmatrix}\nx \\\\ y \\\\ 1\n\\end{pmatrix} = \\begin{pmatrix}\nx + t_x \\\\ y+ t_y \\\\ 1\n\\end{pmatrix}\n\\]</p>\n<div class=\"explain\">\n<p>栗知识：\\((x,y,0)\\)中的 0 是为了保证向量的平移不变性。</p>\n<ul>\n<li>vec + vec = vec</li>\n<li>point - point = vec</li>\n<li>point + vec = point</li>\n<li>point + point = the gravity center of the two points （中点）\n<ul>\n<li>For all \\(\\begin{pmatrix} x \\\\ y \\\\ w \\end{pmatrix} \\rightarrow \\begin{pmatrix} x/w \\\\ y/w \\\\ 1\\end{pmatrix},\\ w \\not= 0\\)</li>\n</ul>\n</li>\n</ul>\n</div>\n<p>2D Transformations:</p>\n<ul>\n<li>\n<p>Scale\n\\[\nS(s_x, s_y) = \\begin{pmatrix} \ns_x &amp; 0 &amp; 0 \\\\\n0 &amp; s_y &amp; 0 \\\\\n0 &amp; 0 &amp; 1 \n\\end{pmatrix}\n\\]</p>\n</li>\n<li>\n<p>Rotation\n\\[\nR(\\alpha) = \\begin{pmatrix} \n\\cos\\alpha &amp; -\\sin\\alpha &amp; 0 \\\\\n\\sin\\alpha &amp; \\cos\\alpha &amp; 0 \\\\\n0 &amp; 0 &amp; 1 \n\\end{pmatrix}\n\\]</p>\n</li>\n<li>\n<p>Translation\n\\[\nT(t_x, t_y) = \\begin{pmatrix} \n1 &amp; 0 &amp; t_x \\\\\n0 &amp; 1 &amp; t_y \\\\\n0 &amp; 0 &amp; 1 \n\\end{pmatrix}\n\\]</p>\n</li>\n</ul>\n<p>\\(M^{-1}\\) inverse transform.</p>\n<p>矩阵不满足交换律，变换的顺序很重要。</p>\n<p>3D 变换同样道理：</p>\n<ul>\n<li>3D point \\((x, y, z, 1)^T\\)</li>\n<li>3D vector \\((x, y, z, 0)^T\\)</li>\n</ul>\n<div class=\"extra\">\n<p>\\[\n\\begin{aligned}\nR_\\theta &amp;= \\begin{pmatrix} \n\\cos \\theta &amp; - \\sin \\theta \\\\\n\\sin \\theta &amp; \\cos \\theta\n\\end{pmatrix} \\\\\nR_{-\\theta} &amp;= \\begin{pmatrix} \n\\cos \\theta &amp; \\sin \\theta \\\\\n-\\sin \\theta &amp; \\cos \\theta \n\\end{pmatrix}  \\\\ \n&amp;= R_\\theta^T \\\\\n&amp; = R_\\theta^{-1}\n\\end{aligned}\n\\]\n正交矩阵：逆等于转置</p>\n</div>\n<h1 id=\"p4-transformation-cont.\" tabindex=\"-1\">P4 Transformation Cont.</h1>\n<h3 id=\"viewing(%E8%A7%82%E6%B5%8B)-transformation\" tabindex=\"-1\">Viewing(观测) Transformation</h3>\n<ul>\n<li>View(视图) / Camera transformation</li>\n<li>Projection（投影） transformation\n<ul>\n<li>Orthographic（正交） projection</li>\n<li>Perspective（透视） projection</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3d-transformations\" tabindex=\"-1\">3D Transformations</h3>\n<p>Use 4x4 matrices for <ruby>affine<rt>仿射</rt></ruby> transformations\n\\[\n\\begin{pmatrix}\nx' \\\\ y' \\\\ z' \\\\ 1\n\\end{pmatrix} = \\begin{pmatrix}\na &amp; b &amp; c &amp; t_x \\\\\nd &amp; e &amp; f &amp; t_y  \\\\\ng &amp; h &amp; i &amp; t_z \\\\\n0 &amp; 0 &amp; 0 &amp; 1\n\\end{pmatrix} \\cdot \\begin{pmatrix}\nx \\\\ y \\\\ z \\\\ 1\n\\end{pmatrix}\n\\]</p>\n<h4 id=\"rotation-along-an-axis\" tabindex=\"-1\">Rotation along an axis</h4>\n<img src=\"https://kurikomoe-1300672427.image.myqcloud.com/images/image-20210423221636933.png\" alt=\"image-20210423221636933\" style=\"zoom: 33%;\" />\n<p>其中需要注意的是，\\(R_y\\) 的 \\(\\sin\\alpha\\), \\(\\cos \\alpha\\) 的正负号变化（其他的都是\\(\\alpha\\)，只有y-axis 用的是 \\(-\\alpha\\)）。</p>\n<div class=\"note\">\n<p>这里默认座标系为 \\((x,y,z)\\) 坐标顺序。</p>\n</div>\n<p>Euler angles（欧拉角），任何旋转可以分解为绕 \\(x,y,z\\) 轴的旋转的组合。</p>\n<p>\\(R_{xyz}(\\alpha,\\beta,\\gamma)=R_x(\\alpha)R_y(\\beta)R_z(\\gamma)\\)。</p>\n<p>Rodrigues' Rotation Formula 罗德里得斯旋转公式，沿轴旋转，默认原点：</p>\n<p>\\(\\mathbf{N}\\) 伴随矩阵，\\(\\textbf{n}\\) 旋转方向。\n\\[\nR(\\textbf{n}, \\alpha) = \\cos{\\alpha} \\mathbf{I} + (1 - \\cos \\alpha) \\mathbf{n} \\mathbf{n}^T + \\sin \\alpha \n\\underbrace{\\begin{pmatrix}\n0 &amp; -n_z &amp; n_y \\\\\nn_z &amp; 0 &amp; -n_x \\\\\n-n_y &amp; n_x &amp; 0 \n\\end{pmatrix}}_\\mathbf{N}\n\\]</p>\n<p>如果沿着任意(位置)轴旋转，则需要先进行平移，将轴放置在原点。</p>\n<div class=\"note\">\n<p>来自wiki：如果 \\(v\\) 是在 \\(R^3\\) 中的向量，\\(k\\) 是与转轴同向的单位向量，\\(\\theta\\) 是 \\(v\\) 绕 \\(k\\) 的右手方向旋转经过的角度。那么公式可以表示为：\n\\[\nv_\\textrm{rot} = v \\cos{\\theta} + (k \\times v) \\sin{\\theta} + k (k \\cdot v) (1 - \\cos{\\theta})\n\\]\n传送门：<a href=\"https://zh.wikipedia.org/zh-hans/%E7%BD%97%E5%BE%B7%E9%87%8C%E6%A0%BC%E6%97%8B%E8%BD%AC%E5%85%AC%E5%BC%8F\" target=\"_blank\" rel=\"noopener\">罗德里格旋转公式</a></p>\n</div>\n<h3 id=\"view%2Fcamera-transformation\" tabindex=\"-1\">View/Camera Transformation</h3>\n<ul>\n<li>What is view transformation?</li>\n<li>Think about how to take a photo\n<ul>\n<li>Find a good place and arrange people (<strong>model</strong> transformation)</li>\n<li>Find a good &quot;angle&quot; to put the camera (<strong>view</strong> transformation)</li>\n<li>Cheese! (<strong>projection</strong> transformation, 投影变换)</li>\n</ul>\n</li>\n</ul>\n<p>aka, MVP (Model View Projection) transformation</p>\n<h5 id=\"view-transformation\" tabindex=\"-1\">View Transformation</h5>\n<p>Parameters：</p>\n<ol>\n<li>位置 Position: \\(\\vec{e}\\)</li>\n<li>朝向 Look-at/Gaze direction: \\(\\hat{g}\\)</li>\n<li>上方向 Up dirction: \\(\\hat{t}\\) （「上方向」的确定）</li>\n</ol>\n<div class=\"alert\">\n<p>某种约定俗成的东西（标准位置）：</p>\n<p>\\(\\vec{y}\\) 作为上方向，相机永远处于原点，相机向 \\(-z\\) 方向看。其他物体相对相机运动。</p>\n<img src=\"https://kurikomoe-1300672427.image.myqcloud.com/images/image-20210427073029713.png\" alt=\"image-20210427073029713\" style=\"zoom:50%;\" />\n</div>\n<p>Key Observation:</p>\n<p>​\t相对运动观测不变</p>\n<div class=\"info\">\n<p><strong>约定（aka，标准位置）：</strong></p>\n<p>将相机放置在 \\((0,0,0)\\) 原点上,上方向为 \\(\\hat{y}\\)，看向 \\(-\\hat{z}\\)</p>\n</div>\n<p>Then use \\(M_\\text{view}\\) to transform the cambera from \\((\\vec{e}, \\hat{g}, \\hat{t})\\) to \\((\\mathbf{0}, \\hat{y}, -\\hat{z})\\), \\(g\\): glare, \\(t\\): top</p>\n<ol>\n<li>\\(\\vec{e}\\) to origin</li>\n<li>Rotate \\(\\hat{g}\\) to \\(-\\hat{z}\\)</li>\n<li>Rotate \\(\\hat{t}\\) to \\(\\hat{y}\\)</li>\n<li>Rotate \\((\\hat{g}, x, \\hat{t})\\) to \\(\\hat{x}\\)</li>\n</ol>\n<p>In math form:\n\\[\nM_\\text{view} = R_\\text{view} T_\\text{view}\n\\]\nIt's hard to write the \\(R_\\text{view}\\) , so we use the inverse rotation \\(R^{-1}_\\text{view}\\) to define it.</p>\n<p>\\(X \\rightarrow (\\hat{g} \\times \\hat{t}),\\ Y \\rightarrow \\hat{t}, \\ Z \\rightarrow -\\hat{g}\\)\n\\[\n\\begin{aligned}\nT_\\text{view} &amp;= \\begin{bmatrix}\n1 &amp; 0 &amp; 0 &amp; -x_e \\\\\n0 &amp; 1 &amp; 0 &amp; -y_e \\\\\n0 &amp; 0 &amp; 1 &amp; -z_e \\\\\n0 &amp; 0 &amp; 0 &amp; 1\n\\end{bmatrix} \\\\\nR^{-1}_\\text{view} &amp;= \\begin{bmatrix}\nx_{\\hat{g} \\times \\hat{t}} &amp; x_t &amp; x_{-g} &amp; 0 \\\\\ny_{\\hat{g} \\times \\hat{t}} &amp; y_t &amp; y_{-g} &amp; 0 \\\\\nz_{\\hat{g} \\times \\hat{t}} &amp; z_t &amp; z_{-g} &amp; 0 \\\\\n0 &amp; 0 &amp; 0 &amp; 1\n\\end{bmatrix} \\\\\nR_\\text{view} &amp;= \\begin{bmatrix}\nx_{\\hat{g} \\times \\hat{t}} &amp; y_{\\hat{g} \\times \\hat{t}} &amp; x_{\\hat{g} \\times \\hat{t}} &amp; 0 \\\\\nx_t &amp; y_t &amp; z_t &amp; 0 \\\\\nx_{-g} &amp; y_{-g} &amp; y_{-g} &amp; 0 \\\\\n0 &amp; 0 &amp; 0 &amp; 1\n\\end{bmatrix}\\\\ &amp; \\text{cuz, R is orthogonal matrix}\n\\end{aligned}\n\\]\nThen:\n\\[\nM_\\text{view} = R_\\text{view} T_\\text{view}\n\\]</p>\n<div class=\"note\">\n<p>\\[\n\\begin{align}\nR_\\textrm{view}^{-1}\n% x -> gxt\n&amp; = \\begin{bmatrix}\nX_{\\hat{g} \\times \\hat{t}} &amp; ? &amp; ? \\\\\nY_{\\hat{g} \\times \\hat{t}} &amp; ? &amp; ? \\\\\nY_{\\hat{g} \\times \\hat{t}} &amp; ? &amp; ? \\\\\n\\end{bmatrix} \n\\begin{bmatrix}\n1 \\\\ 0 \\\\ 0\n\\end{bmatrix} \\\\\n% y -> t\n&amp; + \\begin{bmatrix}\n? &amp; X_{\\hat{t}} &amp; ? \\\\\n? &amp; Y_{\\hat{t}} &amp; ? \\\\\n? &amp; Z_{\\hat{t}} &amp; ? \\\\\n\\end{bmatrix} \n\\begin{bmatrix}\n0 \\\\ 1 \\\\ 0\n\\end{bmatrix} \\\\\n% z-> -g\n&amp; + \\begin{bmatrix}\n? &amp; ? &amp; X_{-\\hat{g}} \\\\\n? &amp; ? &amp; Y_{-\\hat{g}} \\\\\n? &amp; ? &amp; Z_{-\\hat{g}} \\\\\n\\end{bmatrix} \n\\begin{bmatrix}\n0 \\\\ 0 \\\\ 1\n\\end{bmatrix} \\\\\n\\end{align}\n\\]\n旋转矩阵是正交矩阵，因此转置即可。</p>\n</div>\n<h3 id=\"projection-transformation\" tabindex=\"-1\">Projection Transformation</h3>\n<ul>\n<li>\n<p>Orthographic projection: 正交投影</p>\n<img src=\"https://kurikomoe-1300672427.image.myqcloud.com/images/image-20210428121903665.png\" alt=\"image-20210428121903665\" style=\"zoom:33%;\" />\n<p>缺乏近大遠小</p>\n</li>\n<li>\n<p>Perspective projection: 透视投影</p>\n<img src=\"https://kurikomoe-1300672427.image.myqcloud.com/images/image-20210428121918092.png\" alt=\"image-20210428121918092\" style=\"zoom:33%;\" />\n</li>\n</ul>\n<div class=\"info\">\n<img src=\"/home/kuriko/.config/Typora/typora-user-images/image-20210428122235579.png\" alt=\"image-20210428122235579\" style=\"zoom:50%;\" />\n</div>\n<h4 id=\"%E6%AD%A3%E4%BA%A4%E6%8A%95%E5%BD%B1%EF%BC%9A%E7%9B%B8%E6%9C%BA%E5%A4%84%E4%BA%8E%E6%97%A0%E9%99%90%E8%BF%9C%E7%9A%84%E6%97%B6%E5%80%99\" tabindex=\"-1\">正交投影：相机处于无限远的时候</h4>\n<p>形式操作描述：对于正交投影，标准位置的摄像头下，去掉 Z 轴数据，再缩放到 \\([-1, 1]^2\\) 就是对应的正交投影。</p>\n<blockquote>\n<p>缩放到 \\([-1, 1]^2\\) 是为了方便后面的顶点剔除和视图变换 &lt;-- 弹幕</p>\n</blockquote>\n<p>正规操作描述：</p>\n<p>将 \\([l,r] \\times [b, t] \\times [\\textbf{f}, \\textbf{n}]\\) 映射到标准立方体 \\([-1, 1]^3\\)</p>\n<p><img src=\"https://kurikomoe-1300672427.image.myqcloud.com/images/202302271920579.png\" alt=\"正则立方体映射\" /></p>\n<p>canonical cube: 标准立方体</p>\n<ul>\n<li>move the cube to origin</li>\n<li>scale the cube to canonical cube</li>\n</ul>\n<p>X：left/right, Y: up/down, Z:far/near(smaller z, further)</p>\n<blockquote>\n<p>因为摄像机看向 \\(-\\hat{z}\\) 因此越远，z 值越小，所以 \\(Z_\\textrm{further} &lt; Z_\\textrm{nearer}\\)</p>\n</blockquote>\n<ol>\n<li>center to origin</li>\n<li>scale (length/width/height -&gt; <strong>2</strong>)</li>\n<li>Then we got a cube \\([-1, 1]^3\\) ,and the object is scaled.</li>\n</ol>\n<p>\\[\nM_\\text{ortho} = \\begin{bmatrix}\n\\frac{2}{r-l} &amp; 0 &amp; 0 &amp; 0 \\\\\n0 &amp; \\frac{2}{t-b} &amp; 0 &amp; 0 \\\\\n0 &amp; 0 &amp; \\frac{2}{n-f} &amp; 0 \\\\\n0 &amp; 0 &amp; 0 &amp; 1 \\\\\n\\end{bmatrix} \\begin{bmatrix}\n1 &amp; 0 &amp; 0 &amp; -\\frac{r+l}{2} \\\\\n0 &amp; 1 &amp; 0 &amp; -\\frac{t+b}{2} \\\\\n0 &amp; 0 &amp; 1 &amp; -\\frac{n+f}{2} \\\\\n0 &amp; 0 &amp; 0 &amp; 1\n\\end{bmatrix}\n\\]</p>\n<blockquote>\n<p>opengl 采用的是左手系。</p>\n<p>另外没有考虑旋转问题。</p>\n<p>视口变换(屏幕映射)会把投影变换中被扭曲的物体还原回去</p>\n</blockquote>\n<hr />\n<h4 id=\"%E9%80%8F%E8%A7%86%E6%8A%95%E5%BD%B1%3A-perspective-projection\" tabindex=\"-1\">透视投影: perspective projection</h4>\n<blockquote>\n<p>相机永远在原点，y 为上，看向 -z</p>\n</blockquote>\n<p>回忆：\\((x,y,z,1), (kx, ky, kz, k)\\) is the same points (\\(k\\not=0\\))</p>\n<p>那么 \\((xz, yz, z^2, z)\\) 仍然是相同的点。齐次坐标性质。</p>\n<div class=\"note\">\n<p>从普通坐标转换成齐次坐标：</p>\n<p>Point \\((x, y, z) => (x, y, z, 1)\\)</p>\n<p>Vector \\((x, y, z) => (x, y, z, 0)\\)</p>\n</div>\n<p>How to do perspective projection</p>\n<ol start=\"0\">\n<li>\n<p>首先我们先规定两个平面 near, far.</p>\n</li>\n<li>\n<p>&quot;squish&quot; the frustum into a cuboid (n-&gt;n f-&gt;f)。</p>\n<ol>\n<li>任何点的 xy 映射成 n 平面对应点的 xy.（之后做平行投影）</li>\n<li>按透视投影，这样映射可以保证近处挡住远处</li>\n</ol>\n</li>\n<li>\n<p>Do orthographic projection</p>\n</li>\n</ol>\n<p>解释一下，就是例如把 f 平面缩小到 canonical cubic 的 f 面，之后在利用平行投影转换过去。</p>\n<img src=\"https://kurikomoe-1300672427.image.myqcloud.com/images/image-20210502122809100.png\" alt=\"image-20210502122809100\" style=\"zoom:67%;\" />\n<div class=\"explain\">\n<p>性质：近平面不变。z 轴不变。远平面的中心点仍然不变（aka 向中心挤压）</p>\n</div>\n<p>第一步计算：&quot;squish&quot;</p>\n<img src=\"https://kurikomoe-1300672427.image.myqcloud.com/images/image-20210502123625255.png\" alt=\"image-20210502123625255\" style=\"zoom:50%;\" />\n$$\ny'  = \\frac{n}{z} y\n$$\n<p>\\[\n\\begin{pmatrix} \nx \\\\ y \\\\ z \\\\ 1\n\\end{pmatrix} \\Rightarrow \\begin{pmatrix}\nnx/y \\\\ ny/z \\\\ \\text{unknown} \\\\ 1\n\\end{pmatrix} \\overset{\\textrm{mult. by z}}{==} \\begin{pmatrix}\nnx \\\\ ny \\\\ \\text{unknown} \\\\ z\n\\end{pmatrix}\n\\]</p>\n<p>这里是假设 \\(M_{\\textrm{persp}->\\textrm{ortho}}^{(4\\times4)}\\) 作用在 \\((x\\ y\\ z\\ 1)^T\\) 上的时候的效果 。对于 \\(n\\) / \\(f\\) 平面上的点不会发生任何变化（对于其他位置，\\(z\\) 也变化，虽然投影中 \\(z\\) 没有什么意义，但是之后 \\(z\\) 包含的深度信息可以辅助做其他遮挡裁剪操作）。</p>\n<p>因此这个 \\(M\\) 可以推导出如下形式：\n\\[\nM_{\\textrm{persp} \\rightarrow \\textrm{ortho}}^{(4 \\times 4)} = \n\\begin{bmatrix}\nn &amp; 0 &amp; 0 &amp; 0 \\\\\n0 &amp; n &amp; 0 &amp; 0 \\\\\n? &amp; ? &amp; ? &amp; ? \\\\\n0 &amp; 0 &amp; 1 &amp; 0\n\\end{bmatrix}\n\\]\nFor <code>unknown</code>, take \\(z=n\\) as consideration</p>\n<blockquote>\n<ul>\n<li>任何点在 near 平面上都不会变化。z == n</li>\n<li>far 平面的 z 在 far 平面上也不会变化。z == f</li>\n</ul>\n<p>因此带入 n，f 后反解 unknown</p>\n</blockquote>\n<p>\\[\n\\begin{pmatrix}\nx \\\\ y \\\\ n \\\\ 1\n\\end{pmatrix} \\Rightarrow \\begin{pmatrix} \nx \\\\ y \\\\ n \\\\ 1\n\\end{pmatrix} == \\begin{pmatrix}\nnx \\\\ ny \\\\ n^2 \\\\ n\n\\end{pmatrix}\n\\]\nSo, M 中未知的第三行可以知道第一组关系： \\(\\begin{pmatrix} 0 &amp; 0 &amp; A &amp; B \\end{pmatrix} \\begin{pmatrix} x \\\\ y \\\\n \\\\ 1 \\end{pmatrix} = n^2, An+B=n^2\\)</p>\n<p>第二组关系：far 平面上中心点 \\((0, 0, f, 1)\\) 仍然在 far 平面中心。\n\\[\n\\begin{pmatrix}\nnx \\\\ ny \\\\ ? \\\\ z\n\\end{pmatrix} \\overset{(0, 0, f, 1)}{\\rightarrow}\n\\begin{pmatrix}\n0 \\\\ 0 \\\\ f \\\\ 1 \n\\end{pmatrix} \\Rightarrow \\begin{pmatrix}\n0 \\\\ 0 \\\\ f \\\\ 1\n\\end{pmatrix} == \\begin{pmatrix}\n0 \\\\ 0 \\\\ f^2 \\\\ f\n\\end{pmatrix}\n\\]</p>\n<p>\\[\nAf + B = f^2\n\\]</p>\n<p>联立方程，得到\n\\[\n\\begin{align}\n&amp; \\begin{cases}\nAn + B = n^2 \\\\\nAf + B = f^2\n\\end{cases}\n\\Rightarrow\n\\begin{cases}\nA = n+f \\\\\nB = -nf\n\\end{cases} \\\\\n&amp; M_{\\textrm{persp}->\\textrm{ortho}}^{(4\\times4)} = \n\\begin{pmatrix}\nn &amp; 0 &amp; 0 &amp; 0 \\\\\n0 &amp; n &amp; 0 &amp; 0 \\\\\n0 &amp; 0&amp; n+f &amp; -nf \\\\\n0 &amp; 0 &amp; 1 &amp; 0\n\\end{pmatrix} \\\\\n&amp; M_\\textrm{persp} = M_\\textrm{ortho} \\cdot M_{\\textrm{persp} \\rightarrow \\textrm{ortho}}\n\\end{align}\n\\]\n对于 n-f 之间的某个点，例如 \\(\\frac{n+f}{2}\\) 经过变换之后会被推向 f。</p>\n<h1 id=\"p5-rasterization-1-(triangles)\" tabindex=\"-1\">P5 Rasterization 1 (Triangles)</h1>\n<blockquote>\n<p>after finishing the transform, all objects are located in the \\([-1,1]^3\\) cubic.</p>\n</blockquote>\n<p><img src=\"https://kurikomoe-1300672427.image.myqcloud.com/images/202302282315750.png\" alt=\"\" /></p>\n<p>the boudning planes as follows:</p>\n<ul>\n<li>\n<p>x = l == left plane</p>\n</li>\n<li>\n<p>x = r == right plane</p>\n</li>\n<li>\n<p>y = b == bottom plane</p>\n</li>\n<li>\n<p>y = t == top plane</p>\n</li>\n<li>\n<p>z = n == near plane</p>\n</li>\n<li>\n<p>z = f == far plane</p>\n</li>\n</ul>\n<p>定义：</p>\n<ol>\n<li>aspect ratio = width / height</li>\n<li>fovY = Y 方向 fov</li>\n</ol>\n<p>可以通过 fovY + aspect 转换出 l,r,b,t</p>\n<p>考虑对称长方体，t -- -t  ..</p>\n<p><img src=\"https://kurikomoe-1300672427.image.myqcloud.com/images/image-20230228231716587.png\" alt=\"image-20230228231716587\" /></p>\n<h2 id=\"canonical-cube-to-screen\" tabindex=\"-1\">Canonical Cube to Screen</h2>\n<p>德语中 rasterize == draw sth onto the screen</p>\n<p>screen space.</p>\n<img src=\"https://kurikomoe-1300672427.image.myqcloud.com/images/image-20230228233004338.png\" alt=\"image-20230228233004338\" style=\"zoom:33%;\" />\n<p>虽然定义上像素坐标是整数，但是实际上像素的中心在 (x+0.5, y+0.5) 上。</p>\n<p>Canonical Cubie \\([-1, 1]^2\\) to screen space (平移+缩放)\n\\[\nM_\\textrm{viewport} = \\begin{pmatrix}\n\\frac{w}{2} &amp; 0 &amp; 0 &amp; \\frac{w}{2} \\\\\n0 &amp; \\frac{h}{2} &amp; 0 &amp; \\frac{h}{2} \\\\\n0 &amp; 0 &amp; 1 &amp; 0 \\\\\n0 &amp; 0 &amp; 0 &amp; 1\n\\end{pmatrix}\n\\]</p>\n<blockquote>\n<p>aka 视口变换</p>\n</blockquote>\n<h2 id=\"rasterizing-triangles-into-pixels\" tabindex=\"-1\">Rasterizing Triangles into Pixels</h2>\n<blockquote>\n<p>介绍了一下各种显示器的显示原理</p>\n</blockquote>\n<p>略</p>\n<h1 id=\"p6-rasterization-2\" tabindex=\"-1\">P6 Rasterization 2</h1>\n<blockquote>\n<p>Antialiasing and Z-Buffering</p>\n</blockquote>\n<p>Viewing =  View + Projection + Viewport</p>\n<h2 id=\"antialiasing\" tabindex=\"-1\">Antialiasing</h2>\n<p>对空间采样 or 时间采样。</p>\n<div class=\"note\">\n<p>sampling <strong>artifacts</strong>.</p>\n<ol>\n<li>锯齿 jaggles</li>\n<li>摩尔纹 moire patterns</li>\n<li>Wagon wheel effect (False Motion)\n<ol>\n<li>注：来自于视觉残留</li>\n</ol>\n</li>\n</ol>\n</div>\n<p>反走样方法：采样之前做 blurring (per-filtering)</p>\n<img src=\"https://pic.kuriko.moe/2023/03/202303072251848.ed802942e107fffc805119a8e5efb376.png\" alt=\"image-20230307224823233\" style=\"zoom:50%;\" />\n<img src=\"https://pic.kuriko.moe/2023/03/202303072254486.29c29cfb629a8f12340166e3055489b5.png\" alt=\"image-20230307225442124\" style=\"zoom:80%;\" />\n<p>:::warn</p>\n<p>先 blur 再 sample 和先 sample 再 blur 完全不同。</p>\n<p>\\(\\cos{2 \\pi f x}, f=\\frac{1}{T}\\)</p>\n<p>spatial domain -&gt; frequency domain:  \\(f(x) \\sim F(\\omega)\\)</p>\n<p>\\(f(x) = \\int_{-\\infty}^{+\\infty}F(\\omega)e^{2 \\pi i \\omega x} d\\omega\\)</p>\n<p>\\(e^{i x} = \\cos{x} + i \\sin{x}\\)</p>\n<p>:::</p>\n<img src=\"https://pic.kuriko.moe/2023/03/202303072349707.52c7ec331a06e4d804fd885eec28c990.png\" alt=\"image-20230307234843608\" style=\"zoom:80%;\" />\n<blockquote>\n<p>高频表达的是图像的边界。</p>\n</blockquote>\n<h2 id=\"%E6%BB%A4%E6%B3%A2-filtering\" tabindex=\"-1\">滤波 Filtering</h2>\n<p>Filtering = Convolution = (Averaging)</p>\n<div class=\"note\">\n<p>时域上的卷积等于频域上的乘积(Convolution in the spatial domain is <code>equal to multiplication in frequency domain</code>)</p>\n<p>所以可以：</p>\n<ol>\n<li>方案1：在时域上做卷积操作</li>\n<li>方案2:\n<ol>\n<li>通过傅立叶变换转换到频域</li>\n<li>将傅立叶变换和卷积核（的傅里叶变换结果）相乘</li>\n<li>转换回时域（傅里叶逆变换）</li>\n</ol>\n</li>\n</ol>\n<img src=\"https://pic.kuriko.moe/2023/05/202305192314141.aa36446e87694bf5b43c23500026fb4a.png\" alt=\"image-20230519231419723\" style=\"zoom:50%;\" />\n</div>\n<p>原函数，冲激函数 -&gt; 采样</p>\n<p>时域上的乘积 == 频域上的卷积，和上面所说的是对偶关系</p>\n<img src=\"https://pic.kuriko.moe/2023/05/202305232338776.8026f4f583849f82546647e96de0b2cb.png\" alt=\"image-20230523233845527\" style=\"zoom:50%;\" />\n<blockquote>\n<p>b 卷积 d = f</p>\n</blockquote>\n<p>从频域信号的角度来考虑，当采样间隔 \\(\\Delta T\\) 变大后，意味着频域中(d)的 \\(f\\) 下降，利用 (d) 对 (b) 采样之后，(f) 中的图形发生重叠（相加），导致采样图形变形。</p>\n<p>因此采取低通滤波后，原图高频部分被截断，此时低采样率下(f)中的每个图形不再发生重叠。</p>\n<p><img src=\"/home/kuriko/.config/Typora/typora-user-images/image-20230523235422387.png\" alt=\"image-20230523235422387\" /></p>\n<h2 id=\"antialiasing-by-supersampling-(msaa)\" tabindex=\"-1\">Antialiasing By Supersampling (MSAA)</h2>\n<p>MSAA 解决的是「模糊」操作，不是采样操作。</p>\n<p>SSAA（Super Sampling Aniti-Aliasing）：使用的是将原图扩大渲染，之后模糊平均缩小到原图大小。（所以没人用）</p>\n<p>MSAA 是只在光栅化阶段计算一下覆盖率，后期着色阶段直接复用计算结果，现代游戏 shader 更重。</p>\n","toc":[{"content":"Prologue","slug":"prologue","lvl":1,"i":0,"seen":0},{"content":"P2 Review of Linear Algebra","slug":"p2-review-of-linear-algebra","lvl":1,"i":1,"seen":0},{"content":"Related References","slug":"related-references","lvl":2,"i":2,"seen":0},{"content":"Lecture","slug":"lecture","lvl":2,"i":3,"seen":0},{"content":"Vectors","slug":"vectors","lvl":3,"i":4,"seen":0},{"content":"Matrix","slug":"matrix","lvl":3,"i":5,"seen":0},{"content":"P3 Transformation","slug":"p3-transformation","lvl":1,"i":6,"seen":0},{"content":"2D Transformation","slug":"2d-transformation","lvl":2,"i":7,"seen":0},{"content":"P4 Transformation Cont.","slug":"p4-transformation-cont.","lvl":1,"i":8,"seen":0},{"content":"Viewing(观测) Transformation","slug":"viewing(%E8%A7%82%E6%B5%8B)-transformation","lvl":3,"i":9,"seen":0},{"content":"3D Transformations","slug":"3d-transformations","lvl":3,"i":10,"seen":0},{"content":"Rotation along an axis","slug":"rotation-along-an-axis","lvl":4,"i":11,"seen":0},{"content":"View/Camera Transformation","slug":"view/camera-transformation","lvl":3,"i":12,"seen":0},{"content":"View Transformation","slug":"view-transformation","lvl":5,"i":13,"seen":0},{"content":"Projection Transformation","slug":"projection-transformation","lvl":3,"i":14,"seen":0},{"content":"正交投影：相机处于无限远的时候","slug":"%E6%AD%A3%E4%BA%A4%E6%8A%95%E5%BD%B1%EF%BC%9A%E7%9B%B8%E6%9C%BA%E5%A4%84%E4%BA%8E%E6%97%A0%E9%99%90%E8%BF%9C%E7%9A%84%E6%97%B6%E5%80%99","lvl":4,"i":15,"seen":0},{"content":"透视投影: perspective projection","slug":"%E9%80%8F%E8%A7%86%E6%8A%95%E5%BD%B1:-perspective-projection","lvl":4,"i":16,"seen":0},{"content":"P5 Rasterization 1 (Triangles)","slug":"p5-rasterization-1-(triangles)","lvl":1,"i":17,"seen":0},{"content":"Canonical Cube to Screen","slug":"canonical-cube-to-screen","lvl":2,"i":18,"seen":0},{"content":"Rasterizing Triangles into Pixels","slug":"rasterizing-triangles-into-pixels","lvl":2,"i":19,"seen":0},{"content":"P6 Rasterization 2","slug":"p6-rasterization-2","lvl":1,"i":20,"seen":0},{"content":"Antialiasing","slug":"antialiasing","lvl":2,"i":21,"seen":0},{"content":"滤波 Filtering","slug":"%E6%BB%A4%E6%B3%A2-filtering","lvl":2,"i":22,"seen":0},{"content":"Antialiasing By Supersampling (MSAA)","slug":"antialiasing-by-supersampling-(msaa)","lvl":2,"i":23,"seen":0}],"slug":"学习笔记/计算机图形学/ep1","published":true,"date":"2021-02-20T16:58:54.000Z","updated":"2023-05-23T16:23:47.000Z","photos":[],"link":"","path":"学习笔记/计算机图形学/ep1/","permalink":"https://kuriko.moe/2021/02/21/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/ep1/","api_path":"api/articles/学习笔记/计算机图形学/ep1.json","keywords":null,"cover":"https://kurikomoe-1300672427.image.myqcloud.com/images/image-20210306160928180.png","categories":[],"tags":[{"name":"学习笔记","path":"api/tags/学习笔记.json"},{"name":"计算机图形学","path":"api/tags/计算机图形学.json"}]}