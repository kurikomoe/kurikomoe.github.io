{"title":"现代计算机图形学入门 学习笔记","subtitle":"EP2","author":"Kuriko Moe (栗子Chan)","excerpt":"<p>计算机图形学入门第二弹</p>\n<p>课程地址：<a href=\"https://www.bilibili.com/video/BV1X7411F744/?p=7\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/BV1X7411F744/?p=7</a></p>\n","render_content":"<p>计算机图形学入门第二弹</p>\n<p>课程地址：<a href=\"https://www.bilibili.com/video/BV1X7411F744/?p=7\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/BV1X7411F744/?p=7</a></p>\n<!-- more -->\n<h1 id=\"lecture-7-shading-1\" tabindex=\"-1\">Lecture 7 Shading 1</h1>\n<blockquote>\n<p>Illumination, Shading and Graphics Pipeline</p>\n</blockquote>\n<p>上一次剩下的问题：我们有多个三角形的时候，如何确定堆叠关系？</p>\n<p>aka 可见性，遮挡 &gt;&gt;&gt; Z-buffering</p>\n<h2 id=\"visibility%2Focclusion\" tabindex=\"-1\">Visibility/Occlusion</h2>\n<div class=\"note\">\n<p>Painter's Algorithm：从远到近依次覆盖。但是物体的 order 选取会影响到绘制。</p>\n</div>\n<h3 id=\"z-buffering%EF%BC%9A%E6%B7%B1%E5%BA%A6%E7%BC%93%E5%AD%98\" tabindex=\"-1\">Z-Buffering：深度缓存</h3>\n<ul>\n<li>存储每个 sample(pixel) 的 min z-value</li>\n<li>需要一个新的 buffer 存储深度信息\n<ul>\n<li>frame buffer stores color values</li>\n<li>depth buffer (z-buffer) stores depth</li>\n</ul>\n</li>\n</ul>\n<p>:::warn</p>\n<p>简单起见，我们认为 Z 永远是正的，因此 Z 越小，越近。所以上面保存 min z-value</p>\n<p>（区别于之前的相机定义，向 -z 方向看)</p>\n<p>提问：该如何处理 alpha 透明信息呢？</p>\n<p>答：<strong>zbuffer 处理不了</strong>。</p>\n<p>:::</p>\n<p>复杂度：O(n)，GPU 自带硬件算法。</p>\n<p>同时 ZBuffer 在 MSAA 中甚至要给次像素做。</p>\n<h2 id=\"shading-%E7%9D%80%E8%89%B2\" tabindex=\"-1\">Shading 着色</h2>\n<p>Blinn-Phong Reflectance Model</p>\n<p>高光+漫反射+环境光照</p>\n<img src=\"https://pic.kuriko.moe/2023/06/7fcdfdcdc64c52ee7c8826f3da6e8bd5.png\" alt=\"image-20230609211758050\" style=\"zoom:50%;\" />\n<p>在一个小平面内，可以认为是平面。</p>\n<p>\\(v\\) 是观察方向，\\(n\\) 为法线方向，\\(l\\) 为光照方向（光源位置 - shading point 之后归一化）</p>\n<p>:::warn</p>\n<p>着色 != 阴影，着色的时候是 Local 的，不考虑其他物体的影响。</p>\n<p>:::</p>\n<h3 id=\"%E6%BC%AB%E5%8F%8D%E5%B0%84-diffuse-reflection\" tabindex=\"-1\">漫反射 Diffuse Reflection</h3>\n<p>根据平面法线 \\(n\\) 和光线方向 \\(l\\) 的夹角，决定了接收到光线能量的强度。</p>\n<p>根据 Lambert's Cosine Law, 单位面积接收到的光正比于 \\(cos\\theta=l \\cdot n\\)</p>\n<p>球面 \\(4\\pi r^2\\) 因此能量遵循平方反比定律。</p>\n<p>因此有：\n\\[\nL_d = k_d (I / r^2) \\max{(0, \\textbf{n} \\cdot \\textbf{l})}\n\\]\n\\(k_d\\) diffuse coefficient (color),多少能量被吸收了。如果定义了 RGB 则可以通过分量吸收率不同来定义颜色。</p>\n<p>\\(L_d\\) diffusely reflected light</p>\n<div class=\"note\">\n<p>漫反射不需要考虑观察者的位置的影响，aka 与 \\(v\\) 无关</p>\n</div>\n<h1 id=\"lecture-8-shading-2\" tabindex=\"-1\">Lecture 8 Shading 2</h1>\n<blockquote>\n<p>shading, pipeline, and texture mapping</p>\n</blockquote>\n<h2 id=\"blinn-phong-reflection-model\" tabindex=\"-1\">Blinn-Phong reflection model</h2>\n<h3 id=\"diffuse\" tabindex=\"-1\">Diffuse</h3>\n<h3 id=\"specular\" tabindex=\"-1\">Specular</h3>\n<img src=\"https://pic.kuriko.moe/2023/06/7bb0aff54391a11718358101a86c7b52.png\" alt=\"image-20230609220906628\" style=\"zoom:67%;\" />\n<p>当观察者接近镜面反射方向 \\(\\textbf{R}\\) 的时候 &lt;=&gt; <code>half vector near normal</code>（半程向量）接近法线方向 \\(\\textbf{n}\\) 。\n\\[\n\\begin{align}\n\\textbf{h} &amp;= \\textrm{bisector} (\\textbf{v}, \\textbf{l}) \\\\\n           &amp;= \\frac{\\textbf{v} + \\textbf{l}}{|| \\textbf{v} + \\textbf{l}||}\n           \\end{align}\n\\]\n因此有：\n\\[\n\\begin{align}\nL_s &amp;= k_s (I/r^2)\\max{(0, \\cos\\alpha)^p} \\\\\n    &amp;= k_s (I/r^2)\\max{(0, \\textbf{n}\\cdot\\textbf{h})^p}\n\\end{align}\n\\]\n\\(k_s\\) 镜面反射系数(specular coefficient)。</p>\n<div class=\"explain\">\n<p>这里的 \\(\\textbf{n}\\cdot\\textbf{l}\\) 计算能量吸收被简化掉了。</p>\n<p>\\(p\\) 决定了反射区域的大小，高光系数。用来调整高光范围的大小。\\(p\\in[100,200]\\)</p>\n<img src=\"https://pic.kuriko.moe/2023/06/58c0d8c8cf773a8ef84df13525e98ba3.png\" alt=\"image-20230609221904462\" style=\"zoom:67%;\" />\n</div>\n<h3 id=\"ambient\" tabindex=\"-1\">Ambient</h3>\n<p>\\(L_a = k_a I_a\\)</p>\n<p>\\(L_a\\) 反射环境光，\\(k_a\\) 环境光系数，\\(I_a\\) 环境光强度</p>\n<blockquote>\n<p>全局光照会更精细的给出环境光建模</p>\n</blockquote>\n<p>总结起来的话，就是：</p>\n<p><img src=\"https://pic.kuriko.moe/2023/06/a9eb3240ffe82aa15991b3616287ac72.png\" alt=\"\" /></p>\n<p>:::error</p>\n<p>如果一个点凹下去，那么应该考虑环境光遮蔽，Blinn-Phong 模型需要修改。</p>\n<p>亮度与观测者距离无关。</p>\n<p>:::</p>\n<h2 id=\"shading-frequencies-%E7%9D%80%E8%89%B2%E9%A2%91%E7%8E%87\" tabindex=\"-1\">Shading Frequencies 着色频率</h2>\n<p><img src=\"https://pic.kuriko.moe/2023/06/5c3f29e2f9b6cd906e14abba1bc3745c.png\" alt=\"image-20230609224243692\" /></p>\n<ul>\n<li><strong>Flat</strong> shading (each triangle flat)</li>\n<li><strong>Gouraud</strong> shading\n<ul>\n<li>Interpolate colors from vertices across the triangle</li>\n<li>Each vertex has a normal vector</li>\n<li>·vertices - the plural of vertex·</li>\n<li>内部直接插值颜色</li>\n</ul>\n</li>\n<li><strong>Phong</strong> shading\n<ul>\n<li>内部每个像素都插值一个法线，再用法线计算颜色</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"%E5%A6%82%E4%BD%95%E5%AE%9A%E4%B9%89%E9%80%90%E9%A1%B6%E7%82%B9%E6%B3%95%E7%BA%BF\" tabindex=\"-1\">如何定义逐顶点法线</h3>\n<p>顶点法线等于相邻的面的法线的平均：\n\\[\nN_v = \\frac{\\sum_i{N_i}}{||\\sum_i N_i||}\n\\]\n可以用三角形面积作为权重来做加权平均。</p>\n<p>逐像素法线：<code>重心坐标</code></p>\n<h2 id=\"graphics-(real-time-rendering)-pipeline\" tabindex=\"-1\">Graphics (Real-time Rendering) Pipeline</h2>\n<p>实时渲染管线</p>\n<p><img src=\"https://pic.kuriko.moe/2023/06/4656f8eccbb1b6676375944fb38341d8.png\" alt=\"image-20230609230003631\" /></p>\n<div class=\"explain\">\n<p>模型的定义由：顶点集 + 每三个顶点组成的三角形集</p>\n<p>因此变换的时候，只要对顶点操作即可，不会影响到三个点的关系集</p>\n</div>\n<h3 id=\"shader-program\" tabindex=\"-1\">Shader Program</h3>\n<p>对于顶点的 shader 称为 vertex shader</p>\n<p>对于像素操作的 shader 称为 fragment/pixel shader</p>\n<p>参考网站: [shadertoy](<a href=\"https://www.shadertoy.com/view/NdscDf\" target=\"_blank\" rel=\"noopener\">Playing around shader (shadertoy.com)</a>)</p>\n<p>参考软件：kodelife</p>\n<h3 id=\"uv-mapping\" tabindex=\"-1\">UV mapping</h3>\n<p>任何一个三维物体的表面都能展开成一个二维平面(texture)。</p>\n<p>(可能需要美工手动展开)</p>\n<p>\\(u,v \\in [0, 1]\\)</p>\n<p>程序媛认为已经获得了这个数据。</p>\n<h1 id=\"lecture-9-texture-mapping\" tabindex=\"-1\">Lecture 9 Texture mapping</h1>\n<h2 id=\"shading-3\" tabindex=\"-1\">Shading 3</h2>\n<p>Interpolation Across Triangles: Barycentric Coordinates</p>\n<p>重心坐标\n\\[\n\\begin{align}\n(x,y) = &amp; \\alpha A + \\beta B + \\gamma C \\\\\n&amp; \\alpha + \\beta + \\gamma = 1\n\\end{align}\n\\]\n三角形所在平面上的任何一个点都可以用这个表示，但是如果 \\(\\alpha, \\beta, \\gamma\\) 非负，则在三角形内部。\n\\[\n(\\alpha, \\beta, \\gamma) = (1, 0, 0) \n\\]\n<img src=\"https://pic.kuriko.moe/2023/06/6efec0457dac9a7e4303e78d2d6c09e7.png\" alt=\"image-20230610145342441\" /></p>\n<p>通过面积比可以得到重心坐标，当 \\((\\alpha, \\beta, \\gamma) = (\\frac{1}{3}, \\frac{1}{3}, \\frac{1}{3})\\) 时得到的是重心</p>\n<p>利用叉积和面积的关系，我们可以通过向量叉乘的方式结合面积比方程得到重心坐标。</p>\n<p>因此任何定义在顶点上的属性，可以利用 \\(\\alpha, \\beta, \\gamma\\) 得到插值属性。</p>\n<div class=\"note\">\n<p>重心坐标在投影下会发生变化。因此应该先取三维空间中的坐标算出插值，再做投影变换。</p>\n<p>需要利用逆变换找到投影完的东西的三维坐标。</p>\n</div>\n<h2 id=\"applying-texture\" tabindex=\"-1\">Applying Texture</h2>\n<h3 id=\"texture-magnification\" tabindex=\"-1\">Texture Magnification</h3>\n<p>Nearest, Bilinear, Bicubic</p>\n<p>Bilinear: 找到最近的四个点 \\(lerp(x, v_0, v_1) = v_0 + x(v_1 - v_0)\\)</p>\n<p><img src=\"https://pic.kuriko.moe/2023/06/d0a395e870f70c190bee516afc134790.png\" alt=\"image-20230610153731742\" /></p>\n<p>先计算出 u00-u10,u01-u11 上面的值，在做一次垂直方向插值。（双？）线性插值</p>\n<p>Bicubic: 找临近的 16 个，做三次样条插值。</p>\n<h3 id=\"mipmap\" tabindex=\"-1\">MIPMAP</h3>\n<p>Allowing (<code>fast</code>, <code>approx</code>, <code>square</code>) range queries.</p>\n<p>需要额外占用 \\(\\frac{1}{3}\\) 的空间。利用 \\(\\log_2(L)\\) 来快速获得 mipmap 层级。</p>\n<p>利用线性插值获得 1.x 层信息。两次查询一次插值。</p>\n<h3 id=\"anisotropic-filtering-%E5%90%84%E5%90%91%E5%BC%82%E6%80%A7%E8%BF%87%E6%BB%A4\" tabindex=\"-1\">Anisotropic Filtering 各向异性过滤</h3>\n<p><img src=\"https://pic.kuriko.moe/2023/06/e97ae93a2da7ab92118ba7324cd406ff.png\" alt=\"image-20230610162128354\" /></p>\n<p><img src=\"https://pic.kuriko.moe/2023/06/e1353fe30d2404702133d2f2c9ff0830.png\" alt=\"image-20230610162416914\" /></p>\n<h1 id=\"lecture-10-geometry-01\" tabindex=\"-1\">Lecture 10 Geometry 01</h1>\n","toc":[{"content":"Lecture 7 Shading 1","slug":"lecture-7-shading-1","lvl":1,"i":0,"seen":0},{"content":"Visibility/Occlusion","slug":"visibility/occlusion","lvl":2,"i":1,"seen":0},{"content":"Z-Buffering：深度缓存","slug":"z-buffering%EF%BC%9A%E6%B7%B1%E5%BA%A6%E7%BC%93%E5%AD%98","lvl":3,"i":2,"seen":0},{"content":"Shading 着色","slug":"shading-%E7%9D%80%E8%89%B2","lvl":2,"i":3,"seen":0},{"content":"漫反射 Diffuse Reflection","slug":"%E6%BC%AB%E5%8F%8D%E5%B0%84-diffuse-reflection","lvl":3,"i":4,"seen":0},{"content":"Lecture 8 Shading 2","slug":"lecture-8-shading-2","lvl":1,"i":5,"seen":0},{"content":"Blinn-Phong reflection model","slug":"blinn-phong-reflection-model","lvl":2,"i":6,"seen":0},{"content":"Diffuse","slug":"diffuse","lvl":3,"i":7,"seen":0},{"content":"Specular","slug":"specular","lvl":3,"i":8,"seen":0},{"content":"Ambient","slug":"ambient","lvl":3,"i":9,"seen":0},{"content":"Shading Frequencies 着色频率","slug":"shading-frequencies-%E7%9D%80%E8%89%B2%E9%A2%91%E7%8E%87","lvl":2,"i":10,"seen":0},{"content":"如何定义逐顶点法线","slug":"%E5%A6%82%E4%BD%95%E5%AE%9A%E4%B9%89%E9%80%90%E9%A1%B6%E7%82%B9%E6%B3%95%E7%BA%BF","lvl":3,"i":11,"seen":0},{"content":"Graphics (Real-time Rendering) Pipeline","slug":"graphics-(real-time-rendering)-pipeline","lvl":2,"i":12,"seen":0},{"content":"Shader Program","slug":"shader-program","lvl":3,"i":13,"seen":0},{"content":"UV mapping","slug":"uv-mapping","lvl":3,"i":14,"seen":0},{"content":"Lecture 9 Texture mapping","slug":"lecture-9-texture-mapping","lvl":1,"i":15,"seen":0},{"content":"Shading 3","slug":"shading-3","lvl":2,"i":16,"seen":0},{"content":"Applying Texture","slug":"applying-texture","lvl":2,"i":17,"seen":0},{"content":"Texture Magnification","slug":"texture-magnification","lvl":3,"i":18,"seen":0},{"content":"MIPMAP","slug":"mipmap","lvl":3,"i":19,"seen":0},{"content":"Anisotropic Filtering 各向异性过滤","slug":"anisotropic-filtering-%E5%90%84%E5%90%91%E5%BC%82%E6%80%A7%E8%BF%87%E6%BB%A4","lvl":3,"i":20,"seen":0},{"content":"Lecture 10 Geometry 01","slug":"lecture-10-geometry-01","lvl":1,"i":21,"seen":0}],"slug":"学习笔记/计算机图形学/ep2","published":true,"date":"2023-05-23T16:24:54.000Z","updated":"2023-06-12T14:52:21.000Z","photos":[],"link":"","path":"学习笔记/计算机图形学/ep2/","permalink":"https://kuriko.moe/2023/05/24/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/ep2/","api_path":"api/articles/学习笔记/计算机图形学/ep2.json","keywords":null,"cover":"https://pic.kuriko.moe/2023/06/7fcdfdcdc64c52ee7c8826f3da6e8bd5.png","categories":[],"tags":[{"name":"学习笔记","path":"api/tags/学习笔记.json"},{"name":"计算机图形学","path":"api/tags/计算机图形学.json"}]}